#!/bin/bash
 
if [ "$#" -lt 1 ] || [ "$1" == "--help" ] || [ "$1" == "-h" ]                                                                                                                            
then
   echo "Usage : uploadNewWPTResult.sh [runner_result.json path]"
   exit 1
fi

fileName=$(basename "$1")
echo " - The result filename: $fileName"

WPT_FYI_PATH=$HOME/github/wpt.fyi-open-harmony

IFS='-' read -r result wptRevision testDate browserVersion <<< "$fileName"

runsFile="runs.json"
products=("chrome" "firefox" "safari")
shortWPTRevision="${wptRevision:0:10}" 
summaryFileName=huawei_browser-$shortWPTRevision-summary_v2.json.gz
resultURL="https://raw.githubusercontent.com/Gyuyoung/wpt-results-for-dashboard/main/summary-results/$summaryFileName"
browserVersion="${browserVersion%.json}";browserVersion="${browserVersion//_/.}"

echo "   * wpt revision: $wptRevision"
echo "   * test date: $testDate"
echo "   * browser version: $browserVersion"
echo "   * resultURL: $resultURL"


##### Check if wpt.fyi has WPT results for the given wpt revision.

echo " - Check if wpt.fyi has WPT results for $shortWPTRevision WPT commit on chrome, firefox, and safari."

error_found=false

for product in "${products[@]}"; do
    api_url="https://wpt.fyi/api/shas?product=$product"

    json_data=$(curl -s "$api_url")

    contains_revision=$(echo "$json_data" | jq '.[] | select(index("'$shortWPTRevision'"))')

    if [ -z "$contains_revision" ]; then
        echo " - $shortWPTRevision commit was not tested by $product wpt.fyi."
        error_found=true
    fi
done

if [ "$error_found" = true ]; then
    echo " - Exit uploading a new WPT result. Please check the WPT commit revision again."
    exit 1
else
    echo " - The wpt.fyi tested the WPT $shortWPTRevision commit on the all browsers."
fi


##### Update the major browsers data.

echo " - Update Chrome, Firefox, and Safari browser's WPT results for $shortWPTRevision commit."
base_api_url="https://wpt.fyi/api/run?sha=$shortWPTRevision&product="

for product in "${products[@]}"; do
    old_info=$(cat "$runsFile")
    api_url="$base_api_url$product"
    new_info=$(curl -s "$api_url")
    updated_info=$(echo "$old_info" | jq --arg product "$product" --argjson new_info "$new_info" '
        map(if .browser_name == $product then $new_info else . end)
    ')
    echo "$updated_info" > "$runsFile"
    echo "   * runs.json is updated by $product information."
done


##### Update the Huawei browser json data fields.

echo " - Update Huawei browser's WPT result for $shortWPTRevision commit."

runsJsonData=$(cat runs.json)

for ((i=0; i<$(echo "$runsJsonData" | jq length); i++)); do
    browser_name=$(echo "$runsJsonData" | jq -r ".[$i].browser_name")

    if [ "$browser_name" = "huawei_browser" ]; then
        runsJsonData=$(echo "$runsJsonData" | jq ".[$i].browser_version = \"$browserVersion\" | .[$i].revision = \"$shortWPTRevision\" | .[$i].results_url = \"$resultURL\"  | .[$i].raw_results_url = \"$resultURL\" | .[$i].full_revision_hash = \"$wptRevision\" ")
    fi
done

echo "$runsJsonData" > runs.json


##### Convert the WPT result generated by the WPT runner to the summary format processed by the wpt.fyi tool.

echo " - Convert the runner WPT result to the summary format for the wpt.fyi tool."

$WPT_FYI_PATH/results-processor/wptreport.py --summary $summaryFileName $1
gunzip $summaryFileName
mv ${summaryFileName%.gz} $summaryFileName
mv $summaryFileName ./summary-results


##### Push the new WPT result to the repository.

echo " - Push the new WPT result to the repository."

git add ./summary-results/$summaryFileName runs.json
git commit -m "Add a new wpt result on $shortWPTRevision"
git push origin main:main -f

